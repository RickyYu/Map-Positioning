package com.smarter56.waxberry.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.smarter56.waxberry.dao.GpsInfoModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table GPS_INFO_MODEL.
*/
public class GpsInfoModelDao extends AbstractDao<GpsInfoModel, Void> {

    public static final String TABLENAME = "GPS_INFO_MODEL";

    /**
     * Properties of entity GpsInfoModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Lat = new Property(0, Double.class, "lat", false, "LAT");
        public final static Property Lon = new Property(1, Double.class, "lon", false, "LON");
        public final static Property UpdateTime = new Property(2, Long.class, "updateTime", false, "UPDATE_TIME");
        public final static Property UploadTime = new Property(3, String.class, "uploadTime", false, "UPLOAD_TIME");
        public final static Property VehicleNo = new Property(4, String.class, "vehicleNo", false, "VEHICLE_NO");
        public final static Property PlaceName = new Property(5, String.class, "placeName", false, "PLACE_NAME");
        public final static Property Speed = new Property(6, Float.class, "speed", false, "SPEED");
        public final static Property Direction = new Property(7, Float.class, "direction", false, "DIRECTION");
        public final static Property TotalKM = new Property(8, Integer.class, "totalKM", false, "TOTAL_KM");
    };


    public GpsInfoModelDao(DaoConfig config) {
        super(config);
    }
    
    public GpsInfoModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'GPS_INFO_MODEL' (" + //
                "'LAT' REAL," + // 0: lat
                "'LON' REAL," + // 1: lon
                "'UPDATE_TIME' INTEGER," + // 2: updateTime
                "'UPLOAD_TIME' TEXT," + // 3: uploadTime
                "'VEHICLE_NO' TEXT," + // 4: vehicleNo
                "'PLACE_NAME' TEXT," + // 5: placeName
                "'SPEED' REAL," + // 6: speed
                "'DIRECTION' REAL," + // 7: direction
                "'TOTAL_KM' INTEGER);"); // 8: totalKM
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'GPS_INFO_MODEL'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, GpsInfoModel entity) {
        stmt.clearBindings();
 
        Double lat = entity.getLat();
        if (lat != null) {
            stmt.bindDouble(1, lat);
        }
 
        Double lon = entity.getLon();
        if (lon != null) {
            stmt.bindDouble(2, lon);
        }
 
        Long updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindLong(3, updateTime);
        }
 
        String uploadTime = entity.getUploadTime();
        if (uploadTime != null) {
            stmt.bindString(4, uploadTime);
        }
 
        String vehicleNo = entity.getVehicleNo();
        if (vehicleNo != null) {
            stmt.bindString(5, vehicleNo);
        }
 
        String placeName = entity.getPlaceName();
        if (placeName != null) {
            stmt.bindString(6, placeName);
        }
 
        Float speed = entity.getSpeed();
        if (speed != null) {
            stmt.bindDouble(7, speed);
        }
 
        Float direction = entity.getDirection();
        if (direction != null) {
            stmt.bindDouble(8, direction);
        }
 
        Integer totalKM = entity.getTotalKM();
        if (totalKM != null) {
            stmt.bindLong(9, totalKM);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public GpsInfoModel readEntity(Cursor cursor, int offset) {
        GpsInfoModel entity = new GpsInfoModel( //
            cursor.isNull(offset + 0) ? null : cursor.getDouble(offset + 0), // lat
            cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1), // lon
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // updateTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // uploadTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // vehicleNo
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // placeName
            cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6), // speed
            cursor.isNull(offset + 7) ? null : cursor.getFloat(offset + 7), // direction
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8) // totalKM
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, GpsInfoModel entity, int offset) {
        entity.setLat(cursor.isNull(offset + 0) ? null : cursor.getDouble(offset + 0));
        entity.setLon(cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1));
        entity.setUpdateTime(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setUploadTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setVehicleNo(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPlaceName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSpeed(cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6));
        entity.setDirection(cursor.isNull(offset + 7) ? null : cursor.getFloat(offset + 7));
        entity.setTotalKM(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(GpsInfoModel entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(GpsInfoModel entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
